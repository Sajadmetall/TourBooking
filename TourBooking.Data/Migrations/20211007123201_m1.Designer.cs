// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourBooking.Data.DBContext;

namespace TourBooking.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20211007123201_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TourBooking.Data.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<short?>("Currency")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("BookingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TourBooking.Data.Entities.BookingPartyLeader", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartyLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId", "PartyLeaderId");

                    b.HasIndex("PartyLeaderId");

                    b.ToTable("BookingPartyLeaders");
                });

            modelBuilder.Entity("TourBooking.Data.Entities.PartyLeader", b =>
                {
                    b.Property<Guid>("PartyLeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartyLeaderId");

                    b.ToTable("PartyLeader");

                    b.HasData(
                        new
                        {
                            PartyLeaderId = new Guid("d2fc8dea-e40c-4b09-805c-b19c99991f24"),
                            Name = "AliBaba"
                        },
                        new
                        {
                            PartyLeaderId = new Guid("5b8a57ee-b147-4f8c-b7e6-f8725119deb4"),
                            Name = "EliGasht"
                        });
                });

            modelBuilder.Entity("TourBooking.Data.Entities.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TourBooking.Data.Entities.BookingPartyLeader", b =>
                {
                    b.HasOne("TourBooking.Data.Entities.Booking", "Booking")
                        .WithMany("BookingPartyLeaders")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourBooking.Data.Entities.PartyLeader", "PartyLeader")
                        .WithMany("BookingPartyLeaders")
                        .HasForeignKey("PartyLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("PartyLeader");
                });

            modelBuilder.Entity("TourBooking.Data.Entities.Booking", b =>
                {
                    b.Navigation("BookingPartyLeaders");
                });

            modelBuilder.Entity("TourBooking.Data.Entities.PartyLeader", b =>
                {
                    b.Navigation("BookingPartyLeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
